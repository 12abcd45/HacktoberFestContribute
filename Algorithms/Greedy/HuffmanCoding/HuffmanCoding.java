import java.util.PriorityQueue; 
import java.util.Scanner; 
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map; 
  
// node class is the basic structure 
// of each node present in the huffman - tree. 
class Node { 
  
    int data; 
    char c; 
  
    Node left; 
    Node right; 
} 
  
// comparator class helps to compare the node 
// on the basis of one of its attribute. 
// Here we will be compared 
// on the basis of data values of the nodes. 
class MyComparator implements Comparator<Node> { 
    public int compare(Node x, Node y) 
    { 
  
        return x.data - y.data; 
    } 
} 
  
public class HuffmanCoding { 
  
    // recursive function to print the 
    // huffman-code through the tree traversal. 
    // Here s is the huffman - code generated. 
    public static void printCode(Node root, String s) 
    { 
  
        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.left 
                == null
            && root.right 
                   == null
            && Character.isLetter(root.c)) { 
  
            // c is the character in the node 
            System.out.println(root.c + ":" + s); 
  
            return; 
        } 
  
        // if we go to left then add "0" to the code. 
        // if we go to the right add"1" to the code. 
  
        // recursive calls for left and 
        // right sub-tree of the generated tree. 
        printCode(root.left, s + "0"); 
        printCode(root.right, s + "1"); 
    } 
  
    // main function 
    public static void main(String[] args) 
    { 
  
        Scanner s = new Scanner(System.in); 
  
        System.out.print("Input String: ");
        String line = s.nextLine();

        Map<Character, Integer> map = new HashMap<>();

        for (int i = 0; i < line.length(); i++) {
          if (map.containsKey(line.charAt(i))) {
            map.put(line.charAt(i), map.get(line.charAt(i)) + 1);
          } else {
            map.put(line.charAt(i), 1);
          }
        }

        // number of characters. 
        int n = map.size();

        // char[] charArray = { 'a', 'b', 'c', 'd', 'e', 'f' }; 
        // int[] charfreq = { 5, 9, 12, 13, 16, 45 };

        char[] charArray = new char[map.size()]; 
        int[] charfreq = new int[map.size()];

        int k = 0;

        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
          charArray[k] = entry.getKey();
          charfreq[k] = entry.getValue();

          k++;
        }
  
        // creating a priority queue q. 
        // makes a min-priority queue(min-heap). 
        PriorityQueue<Node> q 
            = new PriorityQueue<Node>(n, new MyComparator()); 
  
        for (int i = 0; i < n; i++) { 
  
            // creating a huffman node object 
            // and adding it to the priority-queue. 
            Node hn = new Node(); 
  
            hn.c = charArray[i]; 
            hn.data = charfreq[i]; 
  
            hn.left = null; 
            hn.right = null; 
  
            // add functions adds 
            // the huffman node to the queue. 
            q.add(hn); 
        } 
  
        // create a root node 
        Node root = null; 
  
        // Here we will extract the two minimum value 
        // from the heap each time until 
        // its size reduces to 1, extract until 
        // all the nodes are extracted. 
        while (q.size() > 1) { 
  
            // first min extract. 
            Node x = q.peek(); 
            q.poll(); 
  
            // second min extarct. 
            Node y = q.peek(); 
            q.poll(); 
  
            // new node f which is equal 
            Node f = new Node(); 
  
            // to the sum of the frequency of the two nodes 
            // assigning values to the f node. 
            f.data = x.data + y.data; 
            f.c = '-'; 
  
            // first extracted node as left child. 
            f.left = x; 
  
            // second extracted node as the right child. 
            f.right = y; 
  
            // marking the f node as the root node. 
            root = f; 
  
            // add this node to the priority-queue. 
            q.add(f); 
        } 
  
        // print the codes by traversing the tree 
        printCode(root, ""); 
    } 
} 